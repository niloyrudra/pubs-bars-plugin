{"version":3,"sources":["google-map.min.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","map","jQuery","document","ready","$","barCollections","getElementById","innerHTML","radius","value","data","JSON","parse","mapPosition","lat","lng","mapDiv","options","center","zoom","mapTypeControlOptions","style","google","maps","MapTypeControlStyle","DROPDOWN_MENU","mapTypeId","Map","markers","bars","filter","bar","Math","acos","sin","cos","parseFloat","coords","content","link","name","address","console","log","index","addMarker","props","marker","Marker","position","iconImage","setIcon","infoWindow","InfoWindow","addListener","open","initMap"],"mappings":"CAAY,SAASA,EAAEC,EAAEC,EAAEC,GAAG,SAASC,EAAEC,EAAEC,GAAG,IAAIJ,EAAEG,GAAG,CAAC,IAAIJ,EAAEI,GAAG,CAAC,IAAIE,EAAE,mBAAmBC,SAASA,QAAQ,IAAIF,GAAGC,EAAE,OAAOA,EAAEF,GAAE,GAAI,GAAGI,EAAE,OAAOA,EAAEJ,GAAE,GAAI,IAAIK,EAAE,IAAIC,MAAM,uBAAuBN,EAAE,KAAK,MAAMK,EAAEE,KAAK,mBAAmBF,EAAE,IAAIG,EAAEX,EAAEG,GAAG,CAACS,QAAQ,IAAIb,EAAEI,GAAG,GAAGU,KAAKF,EAAEC,QAAQ,SAASd,GAAoB,OAAOI,EAAlBH,EAAEI,GAAG,GAAGL,IAAeA,IAAIa,EAAEA,EAAEC,QAAQd,EAAEC,EAAEC,EAAEC,GAAG,OAAOD,EAAEG,GAAGS,QAAQ,IAAI,IAAIL,EAAE,mBAAmBD,SAASA,QAAQH,EAAE,EAAEA,EAAEF,EAAEa,OAAOX,IAAID,EAAED,EAAEE,IAAI,OAAOD,EAA7b,CAA4c,CAACa,EAAE,CAAC,SAAST,EAAQU,EAAOJ,GACxe,aAMA,IAAIK,EAJJC,OAAOC,UAAUC,MAAM,SAAUC,IAUjC,WAGE,IAAIC,EAAiBH,SAASI,eAAe,uBAAuBC,UAChEC,EAASN,SAASI,eAAe,gBAAgBG,MACjDJ,IACFK,EAAOC,KAAKC,MAAMP,IAIpB,IAAIQ,EAAc,CAAEC,IAAK,QAASC,KAAM,OAEpCC,EAASd,SAASI,eAAe,OAEjCW,EAAU,CACZC,OAAQL,EACRM,KAAM,EAENC,sBAAuB,CAAEC,MAAOC,OAAOC,KAAKC,oBAAoBC,eAChEC,UAAW,WAGb1B,EAAM,IAAIsB,OAAOC,KAAKI,IAAIX,EAAQC,GAKlC,IAAIW,EAAU,GAEd,GAAIlB,GAAQF,EAAQ,CAKlB,IAAIqB,EAAOnB,EAAKoB,OAAO,SAAUC,GAC/B,OAAO,KAAOC,KAAKC,KAAKD,KAAKE,IAAIrB,EAAYC,KAAOkB,KAAKE,IAAIH,EAAIjB,KAAOkB,KAAKG,IAAItB,EAAYC,KAAOkB,KAAKG,IAAIJ,EAAIjB,KAAOkB,KAAKG,IAAItB,EAAYE,IAAMgB,EAAIhB,MAAQqB,WAAW5B,KAG5K,GAAkB,EAAdqB,EAAKhC,OAAY,CAEnB,IAAK,IAAIX,EAAI,EAAGA,EAAI2C,EAAKhC,OAAQX,IAC/B0C,EAAQ1C,GAAK,CACXmD,OAAQ,CAAEvB,IAAKsB,WAAWP,EAAK3C,GAAG4B,KAAMC,IAAKqB,WAAWP,EAAK3C,GAAG6B,MAChEuB,QAAS,gBAAkBT,EAAK3C,GAAGqD,KAAO,qCAAuCV,EAAK3C,GAAGsD,KAAO,eAAiBX,EAAK3C,GAAGuD,QAAU,QAKvIC,QAAQC,IAAIf,GAGZ,IAAK,IAAIgB,EAAQ,EAAGA,EAAQhB,EAAQ/B,OAAQ+C,IAC1CC,EAAUjB,EAAQgB,KAMxB,SAASC,EAAUC,GAEjB,IAAIC,EAAS,IAAIzB,OAAOC,KAAKyB,OAAO,CAClCC,SAAUH,EAAMT,OAChBrC,IAAKA,IAWP,GANI8C,EAAMI,WAERH,EAAOI,QAAQL,EAAMI,WAInBJ,EAAMR,QAAS,CAEjB,IAAIc,EAAa,IAAI9B,OAAOC,KAAK8B,WAAW,CAC1Cf,QAASQ,EAAMR,UAIjBS,EAAOO,YAAY,QAAS,WAC1BF,EAAWG,KAAKvD,EAAK+C,OA1F3BS,KAIF,IAGI9C,GAmHF,KAAK,GAAG,CAAC","file":"google-map.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n'use strict';\n\njQuery(document).ready(function ($) {\n  initMap();\n});\n\nvar map;\nvar markers = [];\nvar infoWindow;\nvar locationSelect;\nvar data;\n\nfunction initMap() {\n\n  // Collecting Data\n  var barCollections = document.getElementById('pbp-bar-collections').innerHTML;\n  var radius = document.getElementById(\"radiusSelect\").value;\n  if (barCollections) {\n    data = JSON.parse(barCollections);\n  }\n\n  // var mapPosition = {lat: -33.863276, lng: 151.107977}; // Sydney Location\n  var mapPosition = { lat: 51.5074, lng: -0.1278 }; // London Location\n\n  var mapDiv = document.getElementById('map');\n\n  var options = {\n    center: mapPosition,\n    zoom: 4,\n    // gestureHandling: 'greedy',\n    mapTypeControlOptions: { style: google.maps.MapTypeControlStyle.DROPDOWN_MENU },\n    mapTypeId: 'roadmap'\n  };\n\n  map = new google.maps.Map(mapDiv, options);\n\n  // infoWindow = new google.maps.InfoWindow();\n\n  // Array of Markers\n  var markers = [];\n\n  if (data && radius) {\n\n    // Need a better API To Work\n    // searchLocations();\n\n    var bars = data.filter(function (bar) {\n      return 3959 * Math.acos(Math.sin(mapPosition.lat) * Math.sin(bar.lat) + Math.cos(mapPosition.lat) * Math.cos(bar.lat) * Math.cos(mapPosition.lng - bar.lng)) < parseFloat(radius);\n    });\n\n    if (bars.length > 0) {\n\n      for (var i = 0; i < bars.length; i++) {\n        markers[i] = {\n          coords: { lat: parseFloat(bars[i].lat), lng: parseFloat(bars[i].lng) },\n          content: '<h2><a href=\"' + bars[i].link + '\" target=\"_blank\" role=\"bookmark\">' + bars[i].name + '</a></h2><p>' + bars[i].address + '</p>'\n\n        };\n      }\n\n      console.log(markers);\n\n      // Loop Through Markers\n      for (var index = 0; index < markers.length; index++) {\n        addMarker(markers[index]);\n      }\n    }\n  }\n\n  // Add Marker Function\n  function addMarker(props) {\n\n    var marker = new google.maps.Marker({\n      position: props.coords,\n      map: map\n      // icon: props.iconImage\n    });\n\n    // Check for Custom Icon\n    if (props.iconImage) {\n      // Set Icon Image\n      marker.setIcon(props.iconImage);\n    }\n\n    // Check for The Content\n    if (props.content) {\n      // Set Content\n      var infoWindow = new google.maps.InfoWindow({\n        content: props.content\n      });\n\n      // Setting Event Listener for Viewing Content\n      marker.addListener('click', function () {\n        infoWindow.open(map, marker);\n      });\n    }\n  }\n}\n\n// Search Location Of Given Location in the Search Input Field\nfunction searchLocations() {\n\n  var address = document.getElementById(\"addressInput\").value;\n\n  var geocoder = new google.maps.Geocoder();\n\n  geocoder.geocode({ address: address }, function (results, status) {\n\n    if (status == google.maps.GeocoderStatus.OK) {\n      searchLocationsNear(results[0].geometry.location);\n    } else {\n      alert(address + ' not found');\n    }\n  });\n}\n\n// Covert Degree To Radian\nfunction toRadians(angle) {\n  return angle * (Math.PI / 180);\n}\n// Covert Radian To Degree\nfunction toDegrees(angle) {\n  return angle * (180 / Math.PI);\n}\n\n},{}]},{},[1]);\n"]}